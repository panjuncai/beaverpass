generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                             String                   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email                          String                   @unique
  firstName                      String?                  @map("first_name")
  lastName                       String?                  @map("last_name")
  avatar                         String?
  address                        String?
  phone                          String?
  createdAt                      DateTime?                @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                      DateTime?                @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  posts                          Post[]

  @@map("users")
}

model PostImage {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  postId    String     @map("post_id") @db.Uuid
  imageUrl  String     @map("image_url")
  imageType String?    @map("image_type")
  createdAt DateTime?  @map("created_at") @default(now()) @db.Timestamptz(6)
  post      Post       @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([postId], map: "idx_post_images_post_id")
  @@map("post_images")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Post {
  id            String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  category      String
  title         String
  description   String
  condition     String
  amount        Decimal       @default(0) @db.Decimal(12, 2)
  isNegotiable  Boolean?      @default(false) @map("is_negotiable")
  deliveryType  String        @map("delivery_type")
  posterId      String?       @map("poster_id") @db.Uuid
  status        String        @default("ACTIVE")
  createdAt     DateTime?     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime?     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  images        PostImage[]
  poster        User?        @relation(fields: [posterId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([posterId], map: "idx_posts_poster_id")
  @@map("posts")
}


